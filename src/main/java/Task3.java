import java.util.LinkedHashMap;
import java.util.Map;

import static java.util.Arrays.sort;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Task3 {
    public int solution(int[] T) {
        // Sort the array, so we can get a frequency map
        sort(T);

        // Create a linked hash map to maintin the order that we insert the elements,
        // since we sorted, it will be ordered by the candies with more quantities
        Map<Integer, Integer> quantities = new LinkedHashMap<>();
        for (int i = 0; i < T.length; i++) {
            int curr = quantities.getOrDefault(T[i], 0) + 1;
            quantities.put(T[i], curr);
        }

        // Always even
        int numberOfCandies = T.length / 2;

        // Give N - 1 of each candy type, trying to save as much as many types possible
        for(Integer type: quantities.keySet()) {
            int quantity = quantities.get(type);
            numberOfCandies = numberOfCandies - (quantity - 1);
            quantities.put(type, 1);

            if (numberOfCandies <= 0) break;
        }

        // Now, there is no other option, mary needs to give up if she needs
        // to give more candies
        return quantities.keySet().size() - Math.max(numberOfCandies, 0);
    }
}
